'use server';

/**
 * @fileOverview A Genkit tool for searching and augmenting the financial static rulebook.
 */

import { ai } from '@/ai/genkit';
import { searchDocuments, addDocument, RulebookDocument } from '@/lib/knowledge-base';
import { generateKnowledge } from '@/ai/flows/generate-knowledge';
import { z } from 'zod';

// Schema based on the static_rulebook document structure
const RulebookEntrySchema = z.object({
  slug: z.string(),
  title: z.string(),
  category: z.string(),
  tags: z.array(z.string()),
  short_answer: z.string(),
  detailed_markdown: z.string(),
  version: z.string(),
  last_updated: z.string(),
  references: z.array(z.object({ name: z.string(), url: z.string().optional() })),
});

export const searchKnowledgeBase = ai.defineTool(
  {
    name: 'searchKnowledgeBase',
    description: 'Searches the financial static rulebook for relevant entries based on a query. Use this first for any informational question.',
    inputSchema: z.object({
      query: z.string().describe('The user query to search for.'),
    }),
    outputSchema: z.array(RulebookEntrySchema),
  },
  async (input) => {
    return searchDocuments(input.query);
  }
);


export const generateAndStoreKnowledge = ai.defineTool(
  {
    name: 'generateAndStoreKnowledge',
    description: 'Generates a new knowledge base article for a given query, stores it, and returns the generated content. Use this ONLY when searchKnowledgeBase returns an empty result.',
    inputSchema: z.object({
      query: z.string().describe('The user query to generate an article for.'),
    }),
    outputSchema: RulebookEntrySchema,
  },
  async (input) => {
    console.log(`Generating new knowledge for query: "${input.query}"`);
    
    // 1. Generate the new content using a dedicated flow
    const newArticleContent = await generateKnowledge({ query: input.query });

    // 2. Structure it as a new document
    const newDoc: RulebookDocument = {
        ...newArticleContent,
        author: "Pai-AI",
        approver: "Pai-AI",
        version: "1.0",
        status: 'published',
        created_at: new Date().toISOString(),
        last_updated: new Date().toISOString(),
        references: [{ name: "Generated by Gemini" }],
        locale: 'en-IN',
        read_time_seconds: Math.ceil(newArticleContent.detailed_markdown.split(' ').length / 3), // Estimate read time
    };

    // 3. Add it to our "database"
    await addDocument(newDoc);
    
    console.log(`Successfully generated and stored new article with slug: ${newDoc.slug}`);
    
    // 4. Return the new document so the orchestrator can use it immediately
    return newDoc;
  }
);
